[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "autopurple"
version = "1.2.1"
description = "Claude-powered AWS security automation: discover vulnerabilities with ScoutSuite, validate with Pacu, and remediate via AWS MCP servers"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AutoPurple Team", email = "team@autopurple.dev"}
]
keywords = ["aws", "security", "automation", "scoutsuite", "pacu", "mcp"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration", 
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Environment :: Console",
    "Operating System :: OS Independent",
]
requires-python = ">=3.11"
dependencies = [
    "rich>=13.7.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "dataclasses-json>=0.6.3",
    "aiohttp>=3.9.0",
    "anyio>=4.2.0",
    "tenacity>=8.2.0",
    "sqlite-utils>=3.35.0",
    "sqlalchemy[asyncio]>=1.3.0,<2.0.0",
    "aiosqlite>=0.19.0",
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    "structlog>=23.2.0",
    "click>=8.1.0",
    "typer>=0.9.0",
    "anthropic>=0.7.0",
    "scoutsuite>=5.14.0",
    "netaddr>=0.8.0",
    "python-dateutil>=2.8.0",
    "uv>=0.4.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "types-requests>=2.31.0",
    "black>=23.0.0",
    "pre-commit>=3.5.0",
]
validation = [
    "pacu>=1.6.1",
]
ai = [
    "openai>=1.3.0",
]
aws = [
    "moto>=4.2.0",
    "aws-cdk-lib>=2.100.0",
]
all = [
    "pacu>=1.6.1",
    "openai>=1.3.0",
    "moto>=4.2.0",
    "aws-cdk-lib>=2.100.0",
]

[project.scripts]
autopurple = "autopurple.cli.main:main"
autopurple-install = "autopurple.cli.install:post_install"

[project.urls]
Homepage = "https://github.com/autopurple/autopurple"
Repository = "https://github.com/autopurple/autopurple"
Documentation = "https://autopurple.readthedocs.io"

[tool.hatch.build]
include = [
  "autopurple",
  "README.md",
  "LICENSE",
  "INSTALL.md",
  "AUTOPURPLE_CLAUDE_INTEGRATION.md",
  "DEMO_COMMANDS.md",
  "CLAUDE_API_SETUP.md",
  "MANIFEST.in",
  "pyproject.toml",
]
exclude = [
  "venv/**",
  ".venv/**",
  "clean_env/**",
  "test_env/**",
  "test_run/**",
  "test_py311/**",
  "tp/**",
  "dist/**",
  "build/**",
  "**/__pycache__/**",
  "*.egg-info/**",
  ".tox/**",
  ".pytest_cache/**",
]

[tool.hatch.build.targets.sdist]
exclude = [
  "venv/**",
  ".venv/**",
  "clean_env/**",
  "test_env/**",
  "test_run/**",
  "test_py311/**",
  "tp/**",
  "dist/**",
  "build/**",
  "**/__pycache__/**",
  "*.egg-info/**",
  ".tox/**",
  ".pytest_cache/**",
]

[tool.hatch.build.targets.wheel]
exclude = [
  "venv/**",
  ".venv/**",
  "clean_env/**",
  "test_env/**",
  "test_run/**",
  "test_py311/**",
  "tp/**",
  "dist/**",
  "build/**",
  "**/__pycache__/**",
  "*.egg-info/**",
  ".tox/**",
  ".pytest_cache/**",
]
Issues = "https://github.com/autopurple/autopurple/issues"

#[tool.hatch.build.targets.wheel]
#packages = ["autopurple"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "moto.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=autopurple",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["autopurple"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

